@import 'node_modules/bootstrap/scss/mixins';
@import '~/variables';

// Mixin
@mixin hideScrollbar {
  padding-top: 10px;
  padding-bottom: 10px;
  margin-top: -10px;
  margin-bottom: -10px;
  -ms-overflow-style: none;
  /* IE and Edge */
  scrollbar-width: none;

  /* Firefox */
  &::-webkit-scrollbar {
    //Chrome, Safari, Opera
    display: none;
  }
}

@mixin d-flex($align: start, $justify: start, $direction: row) {
  display: flex;
  align-items: $align;
  justify-content: $justify;
  flex-direction: $direction;
}

@mixin col($sizes) {

  @each $breakpoint,
  $size in $sizes {
    @include media-breakpoint-up($breakpoint) {

      &,
      &.col {
        @if $size == unset {
          flex: unset;
          max-width: unset;
        }

        @else if $size !=auto {
          @include make-col($size, $grid-columns);
        }

        @else {
          @include make-col-auto();
        }
      }
    }
  }
}

@mixin offset($sizes) {

  @each $breakpoint,
  $size in $sizes {
    @include media-breakpoint-up($breakpoint) {
      @include make-col-offset($size, $grid-columns);
    }
  }
}

@function box-shadow($size, $alpha, $color: $border-shadow-color) {
  @return 0px 3px #{$size}px rgba($color, $alpha);
}

@function sp($spacer, $effect: null) {
  $sp: map-get($spacers, $spacer);

  @if $effect==n {
    $sp: -#{$sp};
  }

  @if $effect==i {
    $sp: $sp !important;
  }

  @return $sp;
}

@function colSizePrc($columnSize) {
  $sp: percentage($columnSize / $grid-columns);
  @return $sp;
}

@mixin mediaTag($tag, $prop, $sizes, $effect: null) {

  @if type-of($sizes) !='map' {
    @debug "mediaTeg generator mixin error: #{$tag}, #{$prop}, #{$sizes}";
  }

  @else {

    $sortedSizes: (xs: null, sm: null, md: null, lg: null, xl: null);

    @each $key in map-keys($sortedSizes) {
      $sortedSizes: map-merge($sortedSizes, ($key: map-get($sizes, $key)));

      @if map-get($sortedSizes, $key)==null {
        $sortedSizes: map-remove($sortedSizes, $key);
      }
    }

    @each $breakpoint,
    $spacer in $sortedSizes {
      @include media-breakpoint-up($breakpoint) {
        $rem_size: map-get($spacers, $spacer);
        $length: $spacer;

        @if $rem_size {
          $length: $rem_size;
        }

        @if $effect==n {
          $length: -#{$length};
        }

        @if $effect==i {
          $length: $length !important;
        }

        @if $prop==vertical {
          #{$tag}-top: #{$length};
          #{$tag}-bottom: #{$length};
        }

        @else if $prop==horizontal {
          #{$tag}-left: #{$length};
          #{$tag}-right: #{$length};
        }

        @else if $prop==null {
          #{$tag}: #{$length};
        }

        @else {
          #{$tag}-#{$prop}: #{$length};
        }
      }
    }
  }
}


// background
@mixin background($sizes, $effect: null) {
  @include mediaTag(background, null, $sizes, $effect);
}

// background-size
@mixin backgroundSize($sizes, $effect: null) {
  @include mediaTag(background, size, $sizes, $effect);
}

// float
@mixin float($sizes, $effect: null) {
  @include mediaTag(float, null, $sizes, $effect);
}

// flex
@mixin flex($sizes, $effect: null) {
  @include mediaTag(flex, null, $sizes, $effect);
}

// flex-wrap
@mixin flexWrap($sizes, $effect: null) {
  @include mediaTag(flex, wrap, $sizes, $effect);
}

// flex-flow
@mixin flexFlow($sizes, $effect: null) {
  @include mediaTag(flex, flow, $sizes, $effect);
}

// flex-direction
@mixin flexDirection($sizes, $effect: null) {
  @include mediaTag(flex, direction, $sizes, $effect);
}

// text-align
@mixin textAlign($sizes, $effect: null) {
  @include mediaTag(text, align, $sizes, $effect);
}

// justify-content
@mixin justifyContent($sizes, $effect: null) {
  @include mediaTag(justify, content, $sizes, $effect);
}

//  align-content
@mixin alignContent($sizes, $effect: null) {
  @include mediaTag(align, content, $sizes, $effect);
}

//  align-items
@mixin alignItems($sizes, $effect: null) {
  @include mediaTag(align, items, $sizes, $effect);
}

// display
@mixin display($sizes, $effect: null) {
  @include mediaTag(display, null, $sizes, $effect);
}

// font-size
@mixin fontSize($sizes, $effect: null) {
  @include mediaTag(font, size, $sizes, $effect);
}

// line-height
@mixin lineHeight($sizes, $effect: null) {
  @include mediaTag(line, height, $sizes, $effect);
}

// font-weight
@mixin fontWeight($sizes, $effect: null) {
  @include mediaTag(font, weight, $sizes, $effect);
}

// width
@mixin width($sizes, $effect: null) {
  @include mediaTag(width, null, $sizes, $effect);
}

// max-width
@mixin maxWidth($sizes, $effect: null) {
  @include mediaTag(max, width, $sizes, $effect);
}

// min-width
@mixin minWidth($sizes, $effect: null) {
  @include mediaTag(min, width, $sizes, $effect);
}

// height
@mixin height($sizes, $effect: null) {
  @include mediaTag(height, null, $sizes, $effect);
}

// max-height
@mixin maxHeight($sizes, $effect: null) {
  @include mediaTag(max, height, $sizes, $effect);
}

// min-height
@mixin minHeight($sizes, $effect: null) {
  @include mediaTag(min, height, $sizes, $effect);
}

// top
@mixin top($sizes, $effect: null) {
  @include mediaTag(top, null, $sizes, $effect);
}

// bottom
@mixin bottom($sizes, $effect: null) {
  @include mediaTag(bottom, null, $sizes, $effect);
}

// right
@mixin right($sizes, $effect: null) {
  @include mediaTag(right, null, $sizes, $effect);
}

//left
@mixin left($sizes, $effect: null) {
  @include mediaTag(left, null, $sizes, $effect);
}

// margin
@mixin m($sizes, $effect: null) {
  @include mediaTag(margin, null, $sizes, $effect);
}

// padding
@mixin p($sizes, $effect: null) {
  @include mediaTag(padding, null, $sizes, $effect);
}

// margin-top
@mixin mt($sizes, $effect: null) {
  @include mediaTag(margin, top, $sizes, $effect);
}

// margin-bottom
@mixin mb($sizes, $effect: null) {
  @include mediaTag(margin, bottom, $sizes, $effect);
}

// margin-left
@mixin ml($sizes, $effect: null) {
  @include mediaTag(margin, left, $sizes, $effect);
}

// margin-right
@mixin mr($sizes, $effect: null) {
  @include mediaTag(margin, right, $sizes, $effect);
}

// margin top + margin-bottom
@mixin my($sizes, $effect: null) {
  @include mediaTag(margin, vertical, $sizes, $effect);
}

// margin-left + margin-right
@mixin mx($sizes, $effect: null) {
  @include mediaTag(margin, horizontal, $sizes, $effect);
}

// padding-top
@mixin pt($sizes, $effect: null) {
  @include mediaTag(padding, top, $sizes, $effect);
}

// padding-bottom
@mixin pb($sizes, $effect: null) {
  @include mediaTag(padding, bottom, $sizes, $effect);
}

// padding-left
@mixin pl($sizes, $effect: null) {
  @include mediaTag(padding, left, $sizes, $effect);
}

// padding-right
@mixin pr($sizes, $effect: null) {
  @include mediaTag(padding, right, $sizes, $effect);
}

// padding top + padding-bottom
@mixin py($sizes, $effect: null) {
  @include mediaTag(padding, vertical, $sizes, $effect);
}

// padding-left + padding-right
@mixin px($sizes, $effect: null) {
  @include mediaTag(padding, horizontal, $sizes, $effect);
}